import "strings"
import "types"

_modules = {
	"root": {
		"data": {},
		"path": [],
		"resources": {
			"google_secret_manager_secret": {
				"secret-basic": {
					0: {
						"applied": {
							"labels": {
								"label": "my-label",
							},
							"replication": [
								{
									"automatic": null,
									"user_managed": [
										{
											"replicas": [
												{
													"customer_managed_encryption": [],
													"location":                    "us-central1",
												},
												{
													"customer_managed_encryption": [],
													"location":                    "us-east1",
												},
											],
										},
									],
								},
							],
							"rotation":  [],
							"secret_id": "secret",
							"timeouts":  null,
							"topics":    [],
							"ttl":       null,
						},
						"destroy": false,
						"diff": {
							"create_time": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"expire_time": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"labels.%": {
								"computed": false,
								"new":      "1",
								"old":      "",
							},
							"labels.label": {
								"computed": false,
								"new":      "my-label",
								"old":      "",
							},
							"name": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"project": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"replication.#": {
								"computed": false,
								"new":      "1",
								"old":      "",
							},
							"replication.0.%": {
								"computed": false,
								"new":      "2",
								"old":      "",
							},
							"replication.0.automatic": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"replication.0.user_managed.#": {
								"computed": false,
								"new":      "1",
								"old":      "",
							},
							"replication.0.user_managed.0.%": {
								"computed": false,
								"new":      "1",
								"old":      "",
							},
							"replication.0.user_managed.0.replicas.#": {
								"computed": false,
								"new":      "2",
								"old":      "",
							},
							"replication.0.user_managed.0.replicas.0.%": {
								"computed": false,
								"new":      "2",
								"old":      "",
							},
							"replication.0.user_managed.0.replicas.0.customer_managed_encryption.#": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"replication.0.user_managed.0.replicas.0.location": {
								"computed": false,
								"new":      "us-central1",
								"old":      "",
							},
							"replication.0.user_managed.0.replicas.1.%": {
								"computed": false,
								"new":      "2",
								"old":      "",
							},
							"replication.0.user_managed.0.replicas.1.customer_managed_encryption.#": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"replication.0.user_managed.0.replicas.1.location": {
								"computed": false,
								"new":      "us-east1",
								"old":      "",
							},
							"rotation.#": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"secret_id": {
								"computed": false,
								"new":      "secret",
								"old":      "",
							},
							"timeouts": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
							"topics.#": {
								"computed": false,
								"new":      "0",
								"old":      "",
							},
							"ttl": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
		},
	},
}

module_paths = [
	[],
]

terraform_version = "1.0.8"

variables = {
	"access_token": "REDACTED_SENSITIVE",
}

module = func(path) {
	if types.type_of(path) is not "list" {
		error("expected list, got", types.type_of(path))
	}

	if length(path) < 1 {
		return _modules.root
	}

	addr = []
	for path as p {
		append(addr, "module")
		append(addr, p)
	}

	return _modules[strings.join(addr, ".")]
}

data = _modules.root.data
path = _modules.root.path
resources = _modules.root.resources
